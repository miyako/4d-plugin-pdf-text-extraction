/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-PDF-Text-Extraction.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : PDF Text Extraction
 #	author : miyako
 #	2021/11/11
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-PDF-Text-Extraction.h"

#pragma mark -

#include "TextExtraction.h"

using namespace std;
using namespace PDFHummus;

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- PDF Text Extraction
            
			case 1 :
				PDF_Extract_text(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void PDF_Extract_text(PA_PluginParameters params) {

    long startPage = 0;
    long endPage = -1;
    int  bidiFlag = -1;
    
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT t;
    t.fromParamAtIndex(pParams, 1);
    CUTF8String path;
    t.copyPath(&path);
    
    PA_ObjectRef returnValue = PA_CreateObject();
    PA_ObjectRef options = PA_GetObjectParameter(params, 2);
    
    if(options) {
        long _startPage = ob_get_n(options, L"start");
        if(_startPage > 0) {
            startPage = _startPage;
        }
        long _endPage = ob_get_n(options, L"end");
        if(_endPage >= _startPage) {
            endPage = _endPage;
        }
        if(ob_is_defined(options, L"bidi")){
            CUTF8String _bidi;
            if(ob_get_s(options, L"bidi", &_bidi)){
                if(_bidi == (const uint8_t *)"LTR")
                    bidiFlag = 0;
                else if(_bidi == (const uint8_t *)"RTL")
                    bidiFlag = 1;
            }
        }
    }
    
    
    TextExtraction textExtraction;
    EStatusCode status;
    
    string filePath = (const char *)path.c_str();
    
    status = textExtraction.ExtractText(filePath, startPage, endPage);

    if(status != eSuccess) {
        cerr << "Error: " << textExtraction.LatestError.description.c_str() << endl;
    }
    TextExtractionWarningList::iterator it = textExtraction.LatestWarnings.begin();
    for(; it != textExtraction.LatestWarnings.end(); ++it) {
        cerr << "Warning: " << it->description.c_str() << endl;
    }
    
    if(status == eSuccess) {
        ob_set_s(returnValue, "text", textExtraction.GetResultsAsText(bidiFlag).c_str());
    }else{
        ob_set_n(returnValue, L"status", status);
    }
    
    ob_set_b(returnValue, L"success", status == eSuccess);
    
    PA_ReturnObject(params, returnValue);
}
